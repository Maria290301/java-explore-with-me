{
	"info": {
		"_postman_id": "6b2289e3-dde7-4fc6-ac47-c416785190cf",
		"name": "feature_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41840109"
	},
	"item": [
		{
			"name": "Valid",
			"item": [
				{
					"name": "Success",
					"item": [
						{
							"name": "Добавление комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ содержит поля комментария\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('authorId');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.text).to.eql(source.text);\r",
											"    pm.expect(target.authorId).to.eql(2);  // или динамически, если есть переменная\r",
											"});\r",
											"\r",
											"// Сохраняем ID комментария в переменную коллекции для последующих запросов\r",
											"pm.collectionVariables.set(\"createdCommentId\", target.id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Comment for event  from user \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "eventId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
											"\r",
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
											"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
											"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
											"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
											"    pm.response.to.have.status(200); // код ответа должен быть 200 OK\r",
											"    pm.response.to.be.json; // тело ответа должно быть в формате JSON\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Категория должна содержать поля: id, created, text, authorId\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('authorId');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text);\r",
											"    pm.expect(target.id).equal(1);  // Пример ID комментария\r",
											"    pm.expect(target.authorId).equal(2);  // Пример ID пользователя\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Update Comment for event 1 from user 2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение обновленного комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
											"\r",
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
											"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
											"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
											"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария от user6 to event2.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Comment for event  from user \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "6"
										},
										{
											"key": "eventId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария, который потом удалит админ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Комментарий успешно создан\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"\r",
											"if (responseData && responseData.id) {\r",
											"    pm.environment.set(\"created_comment_id\", responseData.id); // сохраняем ID\r",
											"    console.log(\"Комментарий создан с id:\", responseData.id);\r",
											"} else {\r",
											"    console.warn(\"Комментарий не содержит id\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"text\": \"This is a comment for Admin deletion test\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "4"
										},
										{
											"key": "eventId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментариев события",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"   pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен быть массивом\", function () {\r",
											"    pm.expect(target).is.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/comments/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение событий с количеством комментов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"   pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, comments\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('views');\r",
											"pm.expect(target).to.have.property('confirmedRequests');\r",
											"pm.expect(target).to.have.property('comments');\r",
											"});\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе// у события с id=2 должно быть три комментария\", function () {\r",
											"    pm.expect(target.comments).to.not.be.null;\r",
											"    pm.expect(target.comments).equal(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментариев события, пустой лист",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/comments/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментариев админом по тексту",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON with body\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// ✅ Проверка, что список не пуст\r",
											"pm.test(\"Должен быть хотя бы один комментарий\", function () {\r",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
											"});\r",
											"\r",
											"// ✅ Поиск комментария с id = 3\r",
											"const commentWithId3 = jsonData.find(comment => comment.id === 3);\r",
											"\r",
											"pm.test(\"Комментарий с id = 3 должен присутствовать\", function () {\r",
											"    pm.expect(commentWithId3, \"Комментарий с id=3 не найден\").to.not.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/search?text=AdmIn",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"search"
									],
									"query": [
										{
											"key": "text",
											"value": "AdmIn"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "получение комментариев админом по тексту пустой список",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"pm.test(\"Test search comment response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/search?text=horror",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"search"
									],
									"query": [
										{
											"key": "text",
											"value": "horror"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "6"
										},
										{
											"key": "commentId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария админом",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UnvalidParams",
					"item": [
						{
							"name": "Добавление комментария c пустым текстом",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"  \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "3"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария неопубликованному событию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"привет\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария c текстом длиной более 1500 символов",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"(REpresentational State Transfer) — это архитектура, т.е. принципы построения распределенных гипермедиа систем, того что другими словами называется World Wide Web, включая универсальные способы обработки и передачи состояний ресурсов по HTTP REST определяет правила архитектуры для дизайна ваших  Web services, фокусируется на систематических ресурсах, включая какого формата состояние ресурсов и передается по  HTTP, и написан разными языками. Если посчитать по количеству использующих веб сервисов, REST стал популярным за прошедшие годы как сервис модели дизайна с преимуществом. На самом деле, REST имеет большое влияние и почти заменил SOAP и  WSDL так как его намного проще и легче использовать. Система должна быть разделена на клиентов и на серверов. Разделение интерфейсов означает, что, например, клиенты не связаны с хранением данных, которое остается внутри каждого сервера, так что мобильность кода клиента улучшается. Серверы не связаны с интерфейсом пользователя или состоянием, так что серверы могут быть проще и масштабируемы. Серверы и клиенты могут быть заменяемы и разрабатываться независимо, пока интерфейс не изменяется. 4Uniform Interface. Единый интерфейс определяет интерфейс между клиентами и серверами. Это упрощает и отделяет архитектуру, которая позволяет каждой части развиваться самостоятельно. Отображает структуру папок как URls. Использует явные методы HTTP. 5. Layered System. В REST допускается разделить систему на иерархию слоев но с условием, что каждый компонент может видеть компоненты только непосредственно следующего слоя. Например, если вы вызывайте службу PayPal а он в свою очередь вызывает службу Visa, вы о вызове службы Visa ничего не должны знать.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "3"
										},
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария пустой текст",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400); \r",
											"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
											"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commentId",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария текст длиной более 1500 символов",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400); \r",
											"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
											"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
											"}); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"(REpresentational State Transfer) — это архитектура, т.е. принципы построения распределенных гипермедиа систем, того что другими словами называется World Wide Web, включая универсальные способы обработки и передачи состояний ресурсов по HTTP REST определяет правила архитектуры для дизайна ваших  Web services, фокусируется на систематических ресурсах, включая какого формата состояние ресурсов и передается по  HTTP, и написан разными языками. Если посчитать по количеству использующих веб сервисов, REST стал популярным за прошедшие годы как сервис модели дизайна с преимуществом. На самом деле, REST имеет большое влияние и почти заменил SOAP и  WSDL так как его намного проще и легче использовать. Система должна быть разделена на клиентов и на серверов. Разделение интерфейсов означает, что, например, клиенты не связаны с хранением данных, которое остается внутри каждого сервера, так что мобильность кода клиента улучшается. Серверы не связаны с интерфейсом пользователя или состоянием, так что серверы могут быть проще и масштабируемы. Серверы и клиенты могут быть заменяемы и разрабатываться независимо, пока интерфейс не изменяется. 4Uniform Interface. Единый интерфейс определяет интерфейс между клиентами и серверами. Это упрощает и отделяет архитектуру, которая позволяет каждой части развиваться самостоятельно. Отображает структуру папок как URls. Использует явные методы HTTP. 5. Layered System. В REST допускается разделить систему на иерархию слоев но с условием, что каждый компонент может видеть компоненты только непосредственно следующего слоя. Например, если вы вызывайте службу PayPal а он в свою очередь вызывает службу Visa, вы о вызове службы Visa ничего не должны знать.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "3"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария пользователь не автор комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments",
										"users",
										":userId",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "3"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "404 NotFound",
			"item": [
				{
					"name": "Получение списка комментариев несуществующего события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2222"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "получение комментария несуществующего пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
									"    pm.response.to.to.have.status(404); // код ответа должен быть равен 200 OK\r",
									"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
									"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "30000"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "получение несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
									"\r",
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
									"    pm.response.to.to.have.status(404); // код ответа должен быть равен 200 OK\r",
									"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
									"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "commentId",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "6"
								},
								{
									"key": "commentId",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария несуществующего пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "600"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария к несуществующему событию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"привет\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventId",
									"value": "2222"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария от несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"привет\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/comments/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "12000"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": " http://localhost:8080"
		},
		{
			"key": "Event ID",
			"value": "{(eid)}"
		},
		{
			"key": "eid",
			"value": "eid"
		},
		{
			"key": "uid",
			"value": "uid"
		},
		{
			"key": "createdCommentId",
			"value": ""
		}
	]
}